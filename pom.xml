<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<groupId>eu.atspace.hash</groupId>
	<artifactId>maven-javacpp-example</artifactId>
	<packaging>jar</packaging>
	<version>1.0-SNAPSHOT</version>
	<name>maven-javacpp-example</name>
	<url>http://maven.apache.org</url>

	<properties>
		<junit.version>4.11</junit.version>
		<javacpp.version>1.1</javacpp.version>
		<jdk.version>1.8</jdk.version>
		<compiler.plugin.version>2.3.2</compiler.plugin.version>
	</properties>

	<dependencies>
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>${junit.version}</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.bytedeco</groupId>
			<artifactId>javacpp</artifactId>
			<version>${javacpp.version}</version>
		</dependency>
	</dependencies>

	<build>
		<plugins>

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>${compiler.plugin.version}</version>
				<configuration>
					<source>${jdk.version}</source>
					<target>${jdk.version}</target>
				</configuration>
			</plugin>

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-dependency-plugin</artifactId>
				<version>2.3</version>
				<executions>
					<execution>
						<id>properties</id>
						<goals>
							<goal>properties</goal>
						</goals>
					</execution>
					<!-- 
						puts the dependencies to the target/lib folder;
						we would need the javacpp-1.1.jar to build the java wrapper shared library
					 -->
					<execution>
						<id>dependencies</id>
						<goals>
							<goal>copy-dependencies</goal>
						</goals>
						<configuration>
							<outputDirectory>${project.build.directory}/lib</outputDirectory>
						</configuration>
					</execution>
				</executions>
			</plugin>

			<!-- 
				everything (including dependencies) will be wrapped in a jar;
				also indicate the main class to be executed my default
			 -->
			<plugin>
				<artifactId>maven-assembly-plugin</artifactId>
				<executions>
					<execution>
						<phase>package</phase>
						<goals>
							<goal>single</goal>
						</goals>
					</execution>
				</executions>
				<configuration>
					<descriptorRefs>
						<descriptorRef>jar-with-dependencies</descriptorRef>
					</descriptorRefs>
					<archive>
						<manifest>
							<mainClass>eu.atspace.hash.FooLib</mainClass>
						</manifest>
					</archive>
				</configuration>
			</plugin>

			<!--
				specify where the libfoo.so is stored, after compile;
				it is needed when the unit test is run
			 -->	
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-plugin</artifactId>
				<version>2.18</version>
				<configuration>
					<skipTests>false</skipTests>
					<forkMode>once</forkMode>
					<environmentVariables>
						<LD_LIBRARY_PATH>target/classes/eu/atspace/hash/linux-x86_64</LD_LIBRARY_PATH>
					</environmentVariables>
					<systemProperties>
						<property>
							<name>java.library.tmpdir</name>
							<value>target/classes/eu/atspace/hash/linux-x86_64</value>
						</property>
					</systemProperties>
				</configuration>
			</plugin>

			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>exec-maven-plugin</artifactId>
				<version>1.1</version>
				<!-- this is how the shared library libfoo.so is built -->
				<executions>
					<execution>
						<id>build-sharedlib</id>
						<phase>process-classes</phase>
						<goals>
							<goal>exec</goal>
						</goals>
						<configuration>
							<executable>make</executable>
							<commandlineArgs>all</commandlineArgs>
							<workingDirectory>${basedir}/src/main/jni</workingDirectory>
						</configuration>
					</execution>
					<execution>
						<id>clean-sharedlib</id>
						<phase>clean</phase>
						<goals>
							<goal>exec</goal>
						</goals>
						<configuration>
							<executable>make</executable>
							<commandlineArgs>clean</commandlineArgs>
							<workingDirectory>${basedir}/src/main/jni</workingDirectory>
						</configuration>
					</execution>
					<!-- in here we build the Java-based wrapper shared library -->
					<execution>
						<id>build-jnilib</id>
						<phase>process-classes</phase>
						<goals>
							<goal>exec</goal>
						</goals>
						<configuration>
							<executable>java</executable>
							<!-- 
								-jar points to the javacpp.jar
								-Xcompiler may be followed by
									-L specifies where the libfoo.so is
									-I points to the foo.h header
								eu.atspace.hash.FooLib is the wrapper class
							 -->
							<commandlineArgs>
								-jar ${project.build.directory}/lib/javacpp-${javacpp.version}.jar -Xcompiler -L${basedir}/target/classes/eu/atspace/hash/linux-x86_64 -Xcompiler -I${basedir}/src/main/jni -classpath target/classes eu.atspace.hash.FooLib
							</commandlineArgs>
						</configuration>
					</execution>
				</executions>
			</plugin> 

		</plugins>

		<pluginManagement>
			<plugins>
				<!--This plugin's configuration is used to store Eclipse m2e settings 
					only. It has no influence on the Maven build itself. -->
				<plugin>
					<groupId>org.eclipse.m2e</groupId>
					<artifactId>lifecycle-mapping</artifactId>
					<version>1.0.0</version>
					<configuration>
						<lifecycleMappingMetadata>
							<pluginExecutions>
								<pluginExecution>
									<pluginExecutionFilter>
										<groupId>
											org.apache.maven.plugins
										</groupId>
										<artifactId>
											maven-dependency-plugin
										</artifactId>
										<versionRange>
											[2.3,)
										</versionRange>
										<goals>
											<goal>properties</goal>
											<goal>
												copy-dependencies
											</goal>
										</goals>
									</pluginExecutionFilter>
									<action>
										<ignore></ignore>
									</action>
								</pluginExecution>
								<pluginExecution>
									<pluginExecutionFilter>
										<groupId>
											org.codehaus.mojo
										</groupId>
										<artifactId>
											exec-maven-plugin
										</artifactId>
										<versionRange>
											[1.1,)
										</versionRange>
										<goals>
											<goal>exec</goal>
										</goals>
									</pluginExecutionFilter>
									<action>
										<ignore></ignore>
									</action>
								</pluginExecution>
								<pluginExecution>
									<pluginExecutionFilter>
										<groupId>org.bytedeco</groupId>
										<artifactId>javacpp</artifactId>
										<versionRange>
											[1.0,)
										</versionRange>
										<goals>
											<goal>build</goal>
										</goals>
									</pluginExecutionFilter>
									<action>
										<ignore></ignore>
									</action>
								</pluginExecution>
							</pluginExecutions>
						</lifecycleMappingMetadata>
					</configuration>
				</plugin>
			</plugins>
		</pluginManagement>

	</build>
</project>
